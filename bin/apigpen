#!/usr/bin/env python

import json
import sys
import yaml
from datetime import datetime

from apigpen import export_api, import_api, list_apis

DESCRIPTION = '''Import and export API Gateway projects.
NOTE: this tool assumes you won't have
more than one REST API with the same name.
'''


def json_serial(obj):
    if isinstance(obj, datetime):
        serial = obj.isoformat()
        return serial

    raise TypeError("{0} not serializable".format(obj))


def dump_yaml(data, stream):
    return yaml.safe_dump(data, stream, default_flow_style=True)


def dump_json(data, stream):
    return json.dump(data, stream, default=json_serial,
                     indent=4, sort_keys=True)


def do_export(args):
    dumps = dump_yaml

    if args.json:
        dumps = dump_json

    if args.file:
        with open(args.file, 'w') as f:
            dumps(export_api(args.export), f)
    else:
        dumps(export_api(args.export), sys.stdout)


def do_import(args):
    loads = yaml.load

    if args.json:
        loads = json.loads

    name = args.import_

    if args.file:
        with open(args.file, 'r') as f:
            data = loads(f)
    else:
        data = loads(sys.stdin)

    print(import_api(name, data))


def do_list(args):
    for item in sorted(list_apis(), key=lambda item: item['name']):
        print('{id} {name}'.format(**item))


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('-l', '--list', action='store_true',
                        help='List REST APIs')
    parser.add_argument('-e', '--export', metavar='NAME_OR_ID',
                        help='Export REST API by name or ID')
    parser.add_argument('-i', '--import', dest='import_', metavar='NAME_OR_ID',
                        help='Import REST API')
    parser.add_argument('-j', '--json', action='store_true',
                        help='Use JSON instead of YAML (the default)')
    parser.add_argument('-f', '--file', metavar='FILENAME',
                        help='Use FILENAME as input or output for import/export.')
    args = parser.parse_args()

    if args.list:
        do_list(args)
    elif args.export:
        do_export(args)
    elif args.import_:
        do_import(args)
    else:
        parser.print_usage()
